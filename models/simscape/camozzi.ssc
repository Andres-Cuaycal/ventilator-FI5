component camozzi
% Camozzi AP Proportional Valve

    nodes
        A = foundation.moist_air.moist_air; % A:left
        B = foundation.moist_air.moist_air; % B:right
    end

    inputs (ExternalAccess = none)
        % Restriction area
        AR = {1e-3, 'm^2'}; % AR:left
    end

    parameters
        restriction_type = foundation.enum.restriction_type.variable; % Restriction type
        %                                                               1 - fixed
        %                                                               2 - variable
    end
    parameters (ExternalAccess = none)
        restriction_area = {0.001, 'm^2'}; % Restriction area
        min_area         = {1e-10, 'm^2'}; % Minimum restriction area
        max_area         = {0.005, 'm^2'}; % Maximum restriction area
    end
    parameters
        area  = {0.01, 'm^2'}; % Cross-sectional area at ports A and B
        Cd    = 0.64;          % Discharge coefficient
        B_lam = 0.999;         % Laminar flow pressure ratio
    end

    parameters (Access = private)
        choked_tol = 0.05; % Tolerance on choked pressure for smooth transition to choked flow
    end

    % Parameter visibility
    if restriction_type == foundation.enum.restriction_type.fixed
        annotations
            restriction_area : ExternalAccess = modify;
        end
        parameters (Access = private)
            area_R = restriction_area; % Restriction area
        end
        equations
            assert(restriction_area > 0)
            assert(restriction_area < area)
        end
    else % restriction_type == foundation.enum.restriction_type.variable
        annotations
            [AR, min_area, max_area] : ExternalAccess = modify;
            Icon = '../assets/camozzi.jpg';
        end
        intermediates (Access = private, ExternalAccess = none)
            area_R = simscape.function.limit(AR, min_area, max_area, false); % Restriction area
        end
        equations
            assert(min_area > 0)
            assert(max_area >= min_area)
            assert(max_area < area)
        end
    end

    % Parameter checks
    equations
        assert(Cd > 0)
        assert(B_lam > 0)
        assert(B_lam < 1)
        assert(choked_tol > 0)
        assert(choked_tol < 1)
    end

    variables (Access = protected)
        mdot_A   = {0, 'kg/s'}; % Mixture mass flow rate into port A
        mdot_B   = {0, 'kg/s'}; % Mixture mass flow rate into port B
        Phi_A    = {0, 'kW'  }; % Mixture energy flow rate into port A
        Phi_B    = {0, 'kW'  }; % Mixture energy flow rate into port B
        mdot_w_A = {0, 'kg/s'}; % Water vapor mass flow rate into port A
        mdot_w_B = {0, 'kg/s'}; % Water vapor mass flow rate into port B
        mdot_g_A = {0, 'kg/s'}; % Trace gas mass flow rate into port A
        mdot_g_B = {0, 'kg/s'}; % Trace gas mass flow rate into port B

        p_R = {0.1, 'MPa'}; % Pressure at the restriction
        T_R = {300, 'K'  }; % Temperature at the restriction
    end

    variables (Access = protected, ExternalAccess = none)
        T_A = {300, 'K'}; % Temperature at port A
        T_B = {300, 'K'}; % Temperature at port B
    end

    branches
        mdot_A   : A.mdot   -> *;
        mdot_B   : B.mdot   -> *;
        Phi_A    : A.Phi    -> *;
        Phi_B    : B.Phi    -> *;
        mdot_w_A : A.mdot_w -> *;
        mdot_w_B : B.mdot_w -> *;
        mdot_g_A : A.mdot_g -> *;
        mdot_g_B : B.mdot_g -> *;
    end

    intermediates (Access = private, ExternalAccess = none)
        % Domain parameters
        trace_gas_model = A.trace_gas_model;
        R_a             = A.R_a;
        R_w             = A.R_w;
        R_g             = A.R_g;
        T_TLU           = A.T_TLU;
        h_a_TLU         = A.h_a_TLU;
        h_w_TLU         = A.h_w_TLU;
        h_g_TLU         = A.h_g_TLU;
        cp_a_coeff      = A.cp_a_coeff;
        cp_w_coeff      = A.cp_w_coeff;
        cp_g_coeff      = A.cp_g_coeff;

        % Port pressure
        p_A = A.p;
        p_B = B.p;

        % Mass fractions
        x_w = convection_A.x_w_I;
        x_g = convection_A.x_g_I;

        % Mixture specific gas constant
        R = foundation.moist_air.mixture_property(R_a, R_w, R_g, x_w, x_g, trace_gas_model);

        % Mixture specific enthalpy
        h_A = foundation.moist_air.mixture_property( ...
            tablelookup(T_TLU, h_a_TLU, T_A, interpolation = linear, extrapolation = linear), ...
            tablelookup(T_TLU, h_w_TLU, T_A, interpolation = linear, extrapolation = linear), ...
            tablelookup(T_TLU, h_g_TLU, T_A, interpolation = linear, extrapolation = linear), ...
            x_w, x_g, trace_gas_model);

        h_B = foundation.moist_air.mixture_property( ...
            tablelookup(T_TLU, h_a_TLU, T_B, interpolation = linear, extrapolation = linear), ...
            tablelookup(T_TLU, h_w_TLU, T_B, interpolation = linear, extrapolation = linear), ...
            tablelookup(T_TLU, h_g_TLU, T_B, interpolation = linear, extrapolation = linear), ...
            x_w, x_g, trace_gas_model);

        h_R = foundation.moist_air.mixture_property( ...
            tablelookup(T_TLU, h_a_TLU, T_R, interpolation = linear, extrapolation = linear), ...
            tablelookup(T_TLU, h_w_TLU, T_R, interpolation = linear, extrapolation = linear), ...
            tablelookup(T_TLU, h_g_TLU, T_R, interpolation = linear, extrapolation = linear), ...
            x_w, x_g, trace_gas_model);

        % Mixture specific heat at the restriction
        T_R_val = value(simscape.function.limit(T_R, A.T_min, A.T_max, false), 'K')
        T_R_vec = [1, T_R_val, T_R_val^2];
        cp_R = foundation.moist_air.mixture_property( ...
            T_R_vec * cp_a_coeff, ...
            T_R_vec * cp_w_coeff, ...
            T_R_vec * cp_g_coeff, ...
            x_w, x_g, trace_gas_model);

        % Threshold for laminar regime
        p_avg = (p_A + p_B)/2;
        Dp_threshold = p_avg * (1 - B_lam);

        % Density at the restriction
        rho_R = p_R / (R * T_R);

        % Density ratio
        rho_ratio_RA = (p_R/p_A)*(T_A/T_R);
        rho_ratio_RB = (p_R/p_B)*(T_B/T_R);

        % Area ratio
        area_ratio = area_R/area;

        % Loss coefficient for turbulent flow between ports A and B
        % Based on combined momentum balance for flow area contraction between inlet and restriction
        % and sudden flow area expansion between restriction and outlet
        K_tur_AB = (1 + area_ratio)*(1 - rho_ratio_RA*area_ratio) - 2*area_ratio*(1 - rho_ratio_RB*area_ratio);
        K_tur_BA = (1 + area_ratio)*(1 - rho_ratio_RB*area_ratio) - 2*area_ratio*(1 - rho_ratio_RA*area_ratio);

        % Loss coefficient for laminar flow
        % Assumes average density
        K_lam = (1 - area_ratio)^2;

        % Pressure drop times loss coefficient
        K_dp_tur_AB = (p_A - p_B) * if ge(K_tur_AB, K_lam), K_tur_AB else K_lam end;
        K_dp_tur_BA = (p_B - p_A) * if ge(K_tur_BA, K_lam), K_tur_BA else K_lam end;
        K_dp_lam = Dp_threshold * K_lam;

        % Smoothed transition between laminar and turbulent regimes
        K_dp = ...
            if gt(p_A, p_B), ...
                simscape.function.blend(K_dp_lam, K_dp_tur_AB, 0, Dp_threshold, p_A - p_B) ...
            elseif lt(p_A, p_B), ...
                simscape.function.blend(K_dp_lam, K_dp_tur_BA, 0, Dp_threshold, p_B - p_A) ...
            else ...
                K_dp_lam ...
            end;

        % Mass flow rate if flow is not choked
        mdot_unchoked = Cd * (p_A - p_B) * area_R * abs(2 * rho_R / K_dp)^0.5;

        % Mass flow rate if flow is choked
        % Assume speed of sound at the restriction
        gamma_R = cp_R/(cp_R - R);
        mdot_choked = Cd * area_R * abs(p_R^2 * gamma_R / R / T_R)^0.5;

        % Pressure drop between from inlet to restriction
        % Based on momentum balance for flow area contraction
        Dp_in_R = ...
            if gt(mdot_A, 0), ...
                (mdot_A/Cd/area_R)^2/2 / rho_R * (1 + area_ratio) * (1 - rho_ratio_RA*area_ratio) ...
            elseif lt(mdot_A, 0), ...
                (mdot_A/Cd/area_R)^2/2 / rho_R * (1 + area_ratio) * (1 - rho_ratio_RB*area_ratio) ...
            else ...
                0 ...
            end;

        % Inlet pressure
        p_in = simscape.function.blend(p_B, p_A, -Dp_threshold, Dp_threshold, p_A - p_B);
    end

    equations
        % Smoothly limit mass flow rate at choked flow
        if ge(mdot_unchoked, 0)
            mdot_A == simscape.function.blend(mdot_unchoked, mdot_choked, ...
                (1-choked_tol)*mdot_choked, mdot_choked, mdot_unchoked);
        else
            mdot_A == simscape.function.blend(mdot_unchoked, -mdot_choked, ...
                (1-choked_tol)*mdot_choked, mdot_choked, -mdot_unchoked);
        end

        % Pressure at the restriction
        p_R == p_in - Dp_in_R;

        % Mass balance
        mdot_A   + mdot_B   == 0;
        mdot_w_A + mdot_w_B == 0;
        mdot_g_A + mdot_g_B == 0;

        % Energy balance
        Phi_A + Phi_B == 0;

        % Mixture specific total enthalpy (adiabatic process)
        convection_A.ht_I == h_A + (R*T_A/p_A)*abs(R*T_A/p_A)*(mdot_A/Cd/area)^2/2;
        convection_A.ht_I == h_B + (R*T_B/p_B)*abs(R*T_B/p_B)*(mdot_A/Cd/area)^2/2;
        convection_A.ht_I == h_R + (R*T_R/p_R)*abs(R*T_R/p_R)*(mdot_A/Cd/area_R)^2/2;

        % Run-time variable checks
        assert(A.p >= A.p_min, message('physmod:simscape:library:moist_air:PressureMinValid', 'A'))
        assert(A.p <= A.p_max, message('physmod:simscape:library:moist_air:PressureMaxValid', 'A'))
        assert(A.T >= A.T_min, message('physmod:simscape:library:moist_air:TemperatureMinValid', 'A'))
        assert(A.T <= A.T_max, message('physmod:simscape:library:moist_air:TemperatureMaxValid', 'A'))
        assert(B.p >= B.p_min, message('physmod:simscape:library:moist_air:PressureMinValid', 'B'))
        assert(B.p <= B.p_max, message('physmod:simscape:library:moist_air:PressureMaxValid', 'B'))
        assert(B.T >= B.T_min, message('physmod:simscape:library:moist_air:TemperatureMinValid', 'B'))
        assert(B.T <= B.T_max, message('physmod:simscape:library:moist_air:TemperatureMaxValid', 'B'))
    end

    % Internal components that calculate convection at ports A and B
    % Convection for mixture energy flow rate, water vapor mass flow rate, and trace gas mass flow rate
    components (ExternalAccess = none)
        convection_A = foundation.moist_air.port_convection(flow_area = area, length_scale = sqrt(4*area/pi));
        convection_B = foundation.moist_air.port_convection(flow_area = area, length_scale = sqrt(4*area/pi));
    end
    connections
        connect(A, convection_A.port)
        connect(B, convection_B.port)
    end

    % Equate variables for internal components that calculate convection at ports A and B
    equations
        convection_A.mdot   == mdot_A;
        convection_A.Phi    == Phi_A;
        convection_A.mdot_w == mdot_w_A;
        convection_A.mdot_g == mdot_g_A;
        convection_B.mdot   == mdot_B;
        convection_B.Phi    == Phi_B;
        convection_B.mdot_w == mdot_w_B;
        convection_B.mdot_g == mdot_g_B;

        convection_A.ht_I  == convection_B.ht_I;
        convection_A.x_w_I == convection_B.x_w_I;
        convection_A.x_g_I == convection_B.x_g_I;
    end

end